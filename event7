/ Hàm kiểm tra số nguyên tố
bool isPrime(int n) {
    if (n < 2) {
        return false;
    }
    for (int i = 2; i <= sqrt(n); i++) {
        if (n % i == 0) {
            return false;
        }
    }
    return true;
}

int main() {
    int level = 10; // level của hiệp sĩ
    int phoenixdown = 20; // số phoenixdown
    int HP = 100; // HP ban đầu

    // Tính n1 và s1
    int n1 = ((level + phoenixdown) % 5 + 1) * 3;
    vector<int> oddNumbers; // Danh sách các số nguyên dương lẻ có 2 chữ số
    for (int i = 1; i <= 99; i += 2) {
        oddNumbers.push_back(i);
    }
    sort(oddNumbers.rbegin(), oddNumbers.rend()); // Sắp xếp giảm dần
    int s1 = 0;
    for (int i = 0; i < n1; i++) {
        s1 += oddNumbers[i];
    }

    // Tăng HP
    HP += s1 % 100;

    // Tìm số nguyên tố gần nhất
    int nextPrime = HP;
    while (!isPrime(nextPrime)) {
        nextPrime++;
    }

    // Tăng HP lên số nguyên tố gần nhất
    HP = nextPrime;

    // In kết quả
    cout << "HP: " << HP << endl;

    return 0;